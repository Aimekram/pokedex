{"version":3,"sources":["components/Header.js","components/Pokemon.js","components/Pagination.js","components/Filter.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Pokemon","props","state","front","flip","bind","mapStats","this","setState","prevState","stats","statsList","forEach","item","statName","stat","name","baseStat","base_stat","obj","push","data","windowWidth","sprites","types","typesList","map","type","join","barWidth","onClick","src","front_default","alt","key","Object","keys","style","width","Math","floor","values","Component","Pagination","totalItems","itemsPerPage","changePage","currentPage","pageCount","ceil","pageNums","Array","index","paramFront","paramBack","length","pageNumsSliced","slice","filter","href","Filter","handleFilterChange","sort","onChange","value","Main","filteredData","isFetched","filterValue","fetchData","fetchMoreData","getSinglePage","filterData","handleResize","window","addEventListener","rawData","results","console","log","url","fetch","response","json","moreData","freshData","pageFirstItem","number","e","target","includes","innerWidth","singlePageData","moreThanOnePage","id","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9e83f89.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Pokedex</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Pokemon extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      front: true,\r\n    };\r\n    this.flip = this.flip.bind(this);\r\n    this.mapStats = this.mapStats.bind(this);\r\n  }\r\n\r\n  flip() {\r\n    this.setState((prevState) => ({ front: !prevState.front }));\r\n  }\r\n\r\n  mapStats(stats) {\r\n    let statsList = [];\r\n    stats.forEach((item) => {\r\n      let statName = item.stat.name;\r\n      let baseStat = item.base_stat;\r\n      let obj = { [statName]: baseStat };\r\n      statsList.push(obj);\r\n    });\r\n    return statsList;\r\n  }\r\n\r\n  render() {\r\n    const { front } = this.state;\r\n    const { data, windowWidth } = this.props;\r\n    const { name, sprites, types, stats } = data;\r\n    const typesList = types.map((item) => item.type.name).join(\" / \");\r\n    const statsList = this.mapStats(stats);\r\n    const barWidth = windowWidth >= 370 ? 150 : 100;\r\n\r\n    return (\r\n      <div onClick={this.flip}>\r\n        {front ? (\r\n          <div className=\"pokemoncard pokemoncard_front\">\r\n            <img\r\n              className=\"pokemoncard_img\"\r\n              src={sprites.front_default}\r\n              alt={name}\r\n            />\r\n            <h2 className=\"pokemoncard_name\">{name}</h2>\r\n          </div>\r\n        ) : (\r\n          <div className=\"pokemoncard pokemoncard_back\">\r\n            <h3 className=\"pokemoncard_subtitle\">{name} stats:</h3>\r\n            <ul className=\"pokemoncard_stats\">\r\n              {statsList.map((item) => (\r\n                <li className=\"pokemoncard_stats_item\" key={Object.keys(item)}>\r\n                  <span>{Object.keys(item)}: </span>\r\n                  <span\r\n                    className=\"pokemoncard_stats_fullbar\"\r\n                    style={{ width: `${barWidth}px` }}\r\n                  >\r\n                    <span\r\n                      className={`pokemoncard_stats_progressbar ${Object.keys(\r\n                        item\r\n                      )}`}\r\n                      style={{\r\n                        width: `${\r\n                          barWidth === 100\r\n                            ? Math.floor((Object.values(item) * 100) / 150)\r\n                            : Math.floor((Object.values(item) * 150) / 250)\r\n                        }px`,\r\n                      }}\r\n                    >\r\n                      {Object.values(item)}\r\n                    </span>\r\n                  </span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <p>Type: {typesList}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokemon;\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ totalItems, itemsPerPage, changePage, currentPage }) => {\r\n  // generate number for each page\r\n  const pageCount = Math.ceil(totalItems / itemsPerPage);\r\n  const pageNums = [...Array(Math.ceil(totalItems / itemsPerPage))].map(\r\n    (item, index) => index + 1\r\n  );\r\n\r\n  //slice pagination if too many pages\r\n  const paramFront = currentPage <= 4 ? 3 : 1;\r\n  const paramBack = currentPage >= pageNums.length - 3 ? 3 : 1;\r\n\r\n  const pageNumsSliced = () => {\r\n    if (pageNums.length > 5) {\r\n      if (currentPage <= 4) {\r\n        return pageNums.slice(0, 5);\r\n      } else if (currentPage > pageNums.length - 4) {\r\n        return pageNums.slice(-5, pageNums.length);\r\n      } else {\r\n        return pageNums.filter(\r\n          (item) =>\r\n            item >= currentPage - paramFront && item <= currentPage + paramBack\r\n        );\r\n      }\r\n    } else {\r\n      return pageNums;\r\n    }\r\n  };\r\n\r\n  // make dots\r\n  const pageNumsDotted = () => {\r\n    if (pageNums.length > 5) {\r\n      if (currentPage < 5) {\r\n        return [...pageNumsSliced(), \"...\", pageCount];\r\n      } else if (currentPage >= pageNums.length - 3) {\r\n        return [1, \"...\", ...pageNumsSliced()];\r\n      } else {\r\n        return [1, \"...\", ...pageNumsSliced(), \"...\", pageCount];\r\n      }\r\n    } else {\r\n      return pageNums;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumsDotted().map((item, index) => (\r\n          <li key={index} className=\"pagination_item\">\r\n            <a\r\n              className={\r\n                item === currentPage\r\n                  ? \"pagination_link currentPage\"\r\n                  : \"pagination_link\"\r\n              }\r\n              onClick={() => changePage(item)}\r\n              href=\"#!\"\r\n            >\r\n              {item}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ handleFilterChange }) => {\r\n  const types = [\r\n    \"normal\",\r\n    \"fighting\",\r\n    \"flying\",\r\n    \"poison\",\r\n    \"ground\",\r\n    \"rock\",\r\n    \"bug\",\r\n    \"ghost\",\r\n    \"steel\",\r\n    \"fire\",\r\n    \"water\",\r\n    \"dragon\",\r\n    \"dark\",\r\n    \"fairy\",\r\n    \"unknown\",\r\n    \"shadow\",\r\n  ].sort();\r\n\r\n  return (\r\n    <form>\r\n      <select className=\"filter\" onChange={handleFilterChange}>\r\n        <option value=\"none\">show all Pokemons</option>\r\n        {types.map((item) => (\r\n          <option value={item} key={item}>\r\n            {item}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport Pokemon from \"./Pokemon\"\r\nimport Pagination from \"./Pagination\";\r\nimport Filter from \"./Filter\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      filteredData: [],\r\n      isFetched: false,\r\n      currentPage: 1,\r\n      itemsPerPage: 12,\r\n      filterValue: \"none\",\r\n      windowWidth: 320,\r\n    };\r\n    this.fetchData = this.fetchData.bind(this);\r\n    this.fetchMoreData = this.fetchMoreData.bind(this);\r\n    this.getSinglePage = this.getSinglePage.bind(this);\r\n    this.changePage = this.changePage.bind(this);\r\n    this.handleFilterChange = this.handleFilterChange.bind(this);\r\n    this.filterData = this.filterData.bind(this);\r\n    this.handleResize = this.handleResize.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.handleResize();\r\n    window.addEventListener(\"resize\", this.handleResize)\r\n    try {\r\n        const rawData = await this.fetchData(\"https://pokeapi.co/api/v2/pokemon?limit=150\");\r\n        const data = await this.fetchMoreData(rawData.results);\r\n        this.setState({ data, filteredData: data });\r\n        this.setState({ isFetched: true });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {}\r\n\r\n  //universal function to make API fetch\r\n  async fetchData(url) {\r\n      try {\r\n          let response = await fetch(url);\r\n          let data = await response.json();\r\n          return data;\r\n      } catch (error) {\r\n          console.log(error)\r\n      }\r\n  }\r\n\r\n  //get specific data about each Pokemon for all Pokemons\r\n  async fetchMoreData(data) {\r\n    const moreData = [];\r\n    for (const item of data) {\r\n      try {\r\n        let freshData = await this.fetchData(item.url);\r\n        moreData.push(freshData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    return moreData;\r\n  }\r\n\r\n  //slice data for single page to display\r\n  getSinglePage(data, currentPage, itemsPerPage) {\r\n    const pageFirstItem = (currentPage-1)*itemsPerPage;\r\n    const singlePageData = data.slice(pageFirstItem, pageFirstItem + itemsPerPage);\r\n    return singlePageData; \r\n  }\r\n\r\n  //change page on pagination list\r\n  changePage(number) {\r\n    number !== \"...\" && this.setState({ currentPage: number })\r\n  }\r\n\r\n  handleFilterChange(e) {\r\n    this.setState({ filterValue: e.target.value }, this.filterData);\r\n  }\r\n\r\n  filterData() {\r\n    const { data, filterValue } = this.state;\r\n    const isNone = filterValue === \"none\"\r\n    const filteredData = isNone ? data : data.filter(item => item.types.map((item) => item.type.name).includes(filterValue))\r\n    this.setState( { filteredData, currentPage: 1 });\r\n  }\r\n\r\n  handleResize() {\r\n    this.setState({ windowWidth: window.innerWidth })\r\n  }\r\n\r\n  render() {\r\n    const { isFetched, itemsPerPage, currentPage, windowWidth, filteredData } = this.state;\r\n    const singlePageData = this.getSinglePage(filteredData, currentPage, itemsPerPage);\r\n    const moreThanOnePage = filteredData.length > itemsPerPage;\r\n\r\n    return (\r\n      !isFetched ? \r\n      <div className=\"loading\">\r\n        <div className=\"pokeball\">\r\n          <div className=\"upper\">\r\n            <div className=\"inner\"></div>\r\n          </div>\r\n          <div className=\"middle\"></div>\r\n          <div className=\"lower\">\r\n            <div className=\"inner\"></div>\r\n          </div>\r\n        </div>\r\n        <p className=\"message\">Loading...</p>\r\n      </div> :\r\n        <main className=\"main\">\r\n          <Filter handleFilterChange={this.handleFilterChange}/>\r\n          { moreThanOnePage && <Pagination totalItems={filteredData.length} currentPage={currentPage} itemsPerPage={itemsPerPage} changePage={this.changePage}/>}\r\n          <ul className=\"pokemonlist\">\r\n              {filteredData.length === 0 ? <p className=\"message\">no items found</p> :\r\n              singlePageData.map(item => {\r\n                return <li key={item.id}>\r\n                  <Pokemon data={item} windowWidth={windowWidth} />\r\n                </li>})\r\n              }\r\n          </ul>\r\n          { moreThanOnePage && <Pagination totalItems={filteredData.length} currentPage={currentPage} itemsPerPage={itemsPerPage} changePage={this.changePage}/>}\r\n        </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Main />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}